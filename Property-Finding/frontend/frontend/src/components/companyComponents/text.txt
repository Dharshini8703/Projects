import React, { useEffect, useState } from "react";
import axios from "axios";
import { ToastContainer, toast } from 'react-toastify';
import { useNavigate } from "react-router-dom";
import logoImage from '../../assets/vkr.jpg'

function CompanyHome() {
  const [cmp_id, setCmp_id] = useState("");
  const [cmp_name, setCmp_name] = useState("");
  const [address, setAddress] = useState("");
  const [logo, setLogo] = useState("");
  const [proof_id, setProof_id] = useState("");
  const [description, setDescription] = useState("");
  const [document, setDocument] = useState(null); // Changed to null
  const [error, setError] = useState(null);
  const [valid, setValid] = useState({
    cmp_id: true,
    cmp_name: true,
    address: true,
    logo: true,
    proof_id: true,
    description: true,
    document: true,
  });
  const [popupUrl, setPopupUrl] = useState('');
  const [popupContent, setPopupContent] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  const openPopup = (content) => {
    setPopupUrl(content); // Use popupContent directly as the URL
  };

  const closePopup = () => {
    setPopupUrl('');
    setPopupContent(null); // Reset content on close
  };

  const handleInputChange = (e) => {
    e.preventDefault();
    const { name, value } = e.target;
    if (name === "cmp_name") {
      !value
        ? setValid((prevValid) => ({ ...prevValid, cmp_name: false }))
        : setValid((prevValid) => ({ ...prevValid, cmp_name: true }));
      setCmp_name(value);
    }
    if (name === "address") {
      !value
        ? setValid((prevValid) => ({ ...prevValid, address: false }))
        : setValid((prevValid) => ({ ...prevValid, address: true }));
      setAddress(value);
    }
    if (name === "proof_id") {
      value.length === 12
        ? setValid((prevValid) => ({ ...prevValid, proof_id: false }))
        : setValid((prevValid) => ({ ...prevValid, proof_id: true }));
      setProof_id(value);
    }
    if (name === "description") {
      !value
        ? setValid((prevValid) => ({ ...prevValid, description: false }))
        : setValid((prevValid) => ({ ...prevValid, description: true }));
      setDescription(value);
    }
  };

  const handleImageChange = (e) => {
    const { name, files } = e.target;
    if (name === "document") {
      console.log(files);
      if (!files || files.length === 0) {
        setValid((prevValid) => ({ ...prevValid, document: false }));
      } else {
        setDocument(files[0]); // Store the selected file
        // Automatically open popup to view the document
        setPopupContent(URL.createObjectURL(files[0]));
      }
    }
    if (name === "logo") {
      const file = files[0];
      if (file) {
        const imageUrl = URL.createObjectURL(file);
        console.log(imageUrl);
        setLogo(imageUrl);
      }
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const formData = new FormData();
    formData.append("cmp_name", cmp_name);
    formData.append("address", address);
    formData.append("proof_id", proof_id);
    formData.append("description", description);
    if (document) {
      formData.append("document", document);
    }
    const token = localStorage.getItem("token");
    if (!token) {
      console.error("No token provided");
      setError("No token provided");
      return;
    }
    try {
      const res = await axios.patch(
        "http://localhost:3000/api/companyUpdate",
        formData,
        {
          headers: {
            "Content-Type": "multipart/form-data",
            "x-auth-token": token,
          },
        }
      );
      if (res.data.message) {
        toast.success(res.data.message, { 
          position: "top-center",
          autoClose: 2000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
        });
      } else {
        toast.success('Updated successfully!', {
          position: "top-center",
          autoClose: 2000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
        });
      }
    } catch (error) {
      console.error("Error:", error);
      toast.error(error.message || "An error occurred", {
        position: "top-right",
        autoClose: 2000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
      });
    }
  };

  return (
    <div>
      <label htmlFor="document" className="input-label">Upload proof*</label>
      <input
        type="file"
        className="input-field-img"
        name="document"
        onChange={handleImageChange}
        required
      />
      {!valid.document && (
        <div>
          <span>Please select an image</span>
          <br />
        </div>
      )}
      {document && (
        <a className="btn-link" onClick={() => openPopup(popupContent)}>View document</a>
      )}
      {popupUrl && (
        <div className="popup">
          <div className="popup-inner">
            <button type="button" className="exit" onClick={closePopup}>x</button>
            <h4 className='docss'>Proof Document</h4>
            {isLoading ? (
              <p>Loading...</p>
            ) : (
              <div>
                {popupContent && (
                  <iframe
                    title="Document Preview"
                    width="100%"
                    height="500px"
                    src={popupContent} // Ensure popupContent is a valid URL
                  />
                )}
              </div>
            )}
          </div>
        </div>
      )}
      <button type="submit" className="submit-btn" onClick={handleSubmit}>
        CONFIRM
      </button>
    </div>
  );
}

export default CompanyHome;
